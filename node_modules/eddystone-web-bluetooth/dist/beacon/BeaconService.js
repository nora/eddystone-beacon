"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var constants_1 = require("../constants");
var enums_1 = require("./enums");
var url_1 = require("./url");
var BeaconService = (function () {
    function BeaconService(service) {
        this.service = service;
    }
    BeaconService.prototype.readCharacteristic = function (uuid) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var characteristic;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.service.getCharacteristic(uuid)];
                    case 1:
                        characteristic = _a.sent();
                        return [2 /*return*/, characteristic.readValue()];
                }
            });
        });
    };
    BeaconService.prototype.writeCharacteristic = function (uuid, value) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var characteristic;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.service.getCharacteristic(uuid)];
                    case 1:
                        characteristic = _a.sent();
                        return [2 /*return*/, characteristic.writeValue(value)];
                }
            });
        });
    };
    /**
     * Interval.
     */
    BeaconService.prototype.readInterval = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var uuid, rawVal, val;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        uuid = constants_1.default.ADVERTISING_INTERVAL_CHARACTERISTIC_UUID;
                        return [4 /*yield*/, this.readCharacteristic(uuid)];
                    case 1:
                        rawVal = _a.sent();
                        val = rawVal.getUint16(0, false);
                        return [2 /*return*/, val];
                }
            });
        });
    };
    BeaconService.prototype.writeInterval = function (ms) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var uuid, rawMs;
            return tslib_1.__generator(this, function (_a) {
                uuid = constants_1.default.ADVERTISING_INTERVAL_CHARACTERISTIC_UUID;
                rawMs = new DataView(new ArrayBuffer(2));
                rawMs.setUint16(0, ms, false);
                return [2 /*return*/, this.writeCharacteristic(uuid, rawMs)];
            });
        });
    };
    /**
     * LOCK
     */
    BeaconService.prototype.isLocked = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var uuid, rawVal, val;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        uuid = constants_1.default.EDDYSTONE_LOCK_STATE_CHARACTERISTIC_UUID;
                        return [4 /*yield*/, this.readCharacteristic(uuid)];
                    case 1:
                        rawVal = _a.sent();
                        val = rawVal.getUint8(0);
                        return [2 /*return*/, val === enums_1.LOCK_VALUES.LOCKED];
                }
            });
        });
    };
    /**
     * RADIO
     */
    BeaconService.prototype.readRadioTxPower = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var uuid, rawVal, val;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        uuid = constants_1.default.RADIO_TX_POWER_CHARACTERISTIC_UUID;
                        return [4 /*yield*/, this.readCharacteristic(uuid)];
                    case 1:
                        rawVal = _a.sent();
                        val = rawVal.getInt8(0);
                        return [2 /*return*/, val];
                }
            });
        });
    };
    /**
     * Writes Radio Tx Power.
     * @param dbm Tx power. Values should range between -100 and +20 dBm.
     * If a power is selected that is not supported by the radio, the beacon should select
     * the next highest power supported, or else the maximum power.
     * @see https://github.com/google/eddystone/blob/master/eddystone-url/README.md#tx-power-level
     */
    BeaconService.prototype.writeRadioTxPower = function (dbm) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var uuid, dbmByte;
            return tslib_1.__generator(this, function (_a) {
                uuid = constants_1.default.RADIO_TX_POWER_CHARACTERISTIC_UUID;
                dbmByte = new Int8Array([dbm]);
                return [2 /*return*/, this.writeCharacteristic(uuid, dbmByte)];
            });
        });
    };
    BeaconService.prototype.readAdvertisedTxPower = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var uuid, rawVal, val;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        uuid = constants_1.default.ADVANCED_ADVERTISED_TX_POWER_CHARACTERISTIC_UUID;
                        return [4 /*yield*/, this.readCharacteristic(uuid)];
                    case 1:
                        rawVal = _a.sent();
                        val = rawVal.getInt8(0);
                        return [2 /*return*/, val];
                }
            });
        });
    };
    BeaconService.prototype.writeAdvertisedTxPower = function (dbm) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var uuid, dbmByte;
            return tslib_1.__generator(this, function (_a) {
                uuid = constants_1.default.ADVANCED_ADVERTISED_TX_POWER_CHARACTERISTIC_UUID;
                dbmByte = new Int8Array([dbm]);
                return [2 /*return*/, this.writeCharacteristic(uuid, dbmByte)];
            });
        });
    };
    /**
     * URL
     */
    BeaconService.prototype.readUrl = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var uuid, rawVal, type, rawUrl;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        uuid = constants_1.default.ADV_SLOT_DATA_CHARACTERISTIC_UUID;
                        return [4 /*yield*/, this.readCharacteristic(uuid)];
                    case 1:
                        rawVal = _a.sent();
                        type = rawVal.getUint8(0);
                        if (type !== enums_1.DATA_VALUES.URL) {
                            return [2 /*return*/, Promise.reject('Advertised data is not a URL')];
                        }
                        rawUrl = new DataView(rawVal.buffer, 2);
                        return [2 /*return*/, url_1.decodeUrl(rawUrl)];
                }
            });
        });
    };
    BeaconService.prototype.writeUrl = function (url) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var uuid, raw, urlBytes, fullBytes;
            return tslib_1.__generator(this, function (_a) {
                uuid = constants_1.default.ADV_SLOT_DATA_CHARACTERISTIC_UUID;
                raw = url_1.encodeUrl(url);
                if (raw.byteLength > 18) {
                    return [2 /*return*/, Promise.reject('Encoded URL is longer than 18 bytes')];
                }
                urlBytes = Array.from(Array(raw.byteLength).keys()).map(function (bytePos) {
                    return raw.getUint8(bytePos);
                });
                fullBytes = new Uint8Array([enums_1.DATA_VALUES.URL].concat(urlBytes));
                return [2 /*return*/, this.writeCharacteristic(uuid, fullBytes)];
            });
        });
    };
    BeaconService.prototype.clearUrl = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var uuid, clearByte;
            return tslib_1.__generator(this, function (_a) {
                uuid = constants_1.default.ADV_SLOT_DATA_CHARACTERISTIC_UUID;
                clearByte = new Uint8Array([0x00]);
                return [2 /*return*/, this.writeCharacteristic(uuid, clearByte)];
            });
        });
    };
    /**
     * MISC
     */
    BeaconService.prototype.factoryReset = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var uuid, factoryResetByte;
            return tslib_1.__generator(this, function (_a) {
                uuid = constants_1.default.ADVANCED_FACTORY_RESET_CHARACTERISTIC_UUID;
                factoryResetByte = new Uint8Array([0x0B]);
                return [2 /*return*/, this.writeCharacteristic(uuid, factoryResetByte)];
            });
        });
    };
    return BeaconService;
}());
exports.BeaconService = BeaconService;
//# sourceMappingURL=BeaconService.js.map